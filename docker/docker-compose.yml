services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/fastapi.conf:/etc/nginx/conf.d/fastapi.conf
      - ./nginx/proxy.conf:/etc/nginx/proxy.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./www/:/workspace/www/
    restart: unless-stopped
  redis:
    image: redis
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - one
    restart: on-failure
    command: ["redis-server", "--requirepass", "$REDIS_PASSWORD"]
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./redis/data:/data

  # mysql:
  #   image: mysql:8.0
  #   container_name: mysql
  #   restart: unless-stopped
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #     MYSQL_DATABASE: ${MYSQL_DATABASE}
  #     MYSQL_USER: ${MYSQL_USER}
  #     MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - ./mysql/:/var/lib/mysql/
  #   command: --default-authentication-plugin=mysql_native_password
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 10
  #   networks:
  #     - one

  db:
    image: postgres:15-alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: ${PGUSER:-fastapi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fastapi}
      POSTGRES_DB: ${POSTGRES_DB:-fastapi}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    command: >
      postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS:-100}'
               -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB}'
               -c 'work_mem=${POSTGRES_WORK_MEM:-4MB}'
               -c 'maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}'
               -c 'effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-4096MB}'
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-h",
          "db",
          "-U",
          "${PGUSER:-fastapi}",
          "-d",
          "${POSTGRES_DB:-fastapi}",
        ]
      interval: 1s
      timeout: 3s
      retries: 60
    ports:
      - 5432:5432
    networks:
      - one

  app:
    image: app
    container_name: app
    ports:
      - 8000:8000
    networks:
      - one
    volumes:
      - ../app/:/workspace/app/
      - ./entrypoint.sh:/workspace/entrypoint.sh
      - ./www/:/workspace/www/
    environment:
      - AUTO_MIGRATE=${AUTO_MIGRATE:-false}
      - SERVICE_ROLE=server

  worker:
    image: app
    container_name: worker
    networks:
      - one
    volumes:
      - ../app/:/workspace/app/
      - ./entrypoint.sh:/workspace/entrypoint.sh
    environment:
      - AUTO_MIGRATE=${AUTO_MIGRATE:-false}
      - SERVICE_ROLE=worker

networks:
  one:
    driver: bridge
    external: true
